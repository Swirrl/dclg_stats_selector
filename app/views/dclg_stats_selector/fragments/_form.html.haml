= row do
	.pmd_box_full
		.spin(style="display: none;")
			(preparing data)
			= image_tag 'publish_my_data/dclg_stats_selector/spinner.gif'

#build-fragment
	= row do
		.pmd_box_full
			.predicate Source Dataset
			%strong
				= @dataset.title
			= link_to '(change dataset)', datasets_selector_fragments_path(@selector), id: 'pick-again', remote: true

	= form_tag selector_fragments_path(@selector), id: 'bf' do
		= hidden_field_tag :dataset_uri, @dataset.uri
		- if choice_of_columns_available?(@dimensions)
			= row do
				.pmd_box_full{style:"margin-top:24px;"}
					.predicate Selected data
					%p#no-filters
						%em All possible combinations of dataset dimension are currently selected.
					#filters(style="display: none;")
						%p Adding data which matches
						#filter-lists{style:"padding: 10px;", class:'clearfix'}
							- @dimensions.each do |dimension|
								.dimension{style:'float:left; padding: 0 10px 10px 10px; margin-left:12px; width:25%;'}
									%h5
										= dimension.label
									%em.all-values
										Any
										/= dimension.label.pluralize
									%ul(style="display: none;")
										/%li.dimension-label= dimension.label
										- dimension.values.each do |dimension_value|
											%li{'id' => dom_id_for_dimension_value(dimension_value, 'filter'), 'style' => 'display: none;'}
												= link_to '#', class: 'remove-dimension-value' do
													= dimension_value[:label]
			= row do
				.pmd_box_full
					#filter-options{style:"background: #f8f8f8; padding: 10px;", class:'clearfix'}
						%p
							To refine your selection, choose which columns you'd like to add to your spreadsheet:
						#dimensions
							- @dimensions.each do |dimension|
								.dimension{style:'float:left; padding:12px; margin-left:12px;  width:25%;'}
									= hidden_field_tag "dataset_dimensions[#{dimension.uri}]", '', class: 'selected-values'
									= hidden_field_tag "all_dataset_dimensions[#{dimension.uri}]", dimension.values.map{|v| v[:uri]}.join(', ')
									%h5
										= dimension.label
									%ul
										- dimension.values.each do |dimension_value|
											%li{'id' => dom_id_for_dimension_value(dimension_value)}
												= link_to dimension_value[:label], '#', 'data-uri' =>  dimension_value[:uri], 'class' => 'dimension-value'
		- else
			= row do
				.pmd_box_full{style:"margin-top:24px;"}
					.predicate Selected data
					%p
						The selected dataset contains has one dimension of data and will add one column.
		= row do
			.pmd_box_full
				.submit.primary
					- label = "#{column_count(@dimensions).to_s} " + (column_count(@dimensions) == 1 ? "column" : "columns")
					= submit_tag "Add #{label}", id: 'submit-fragment', class:'btn mini'

:javascript
	var addValueWithAnchor = function(anchor) {
		var uri = anchor.attr('data-uri'),
				input = anchor.parents('.dimension').find('input.selected-values'),
				dimensionValues;

		if (input.val().length == 0) {
			dimensionValues = [uri];
		} else {
			dimensionValues = input.val().split(', ');
			dimensionValues.push(uri);
		}
		input.val(dimensionValues.join(', '));
	},
	removeValueWithAnchor = function(anchor) {
		var uri = anchor.attr('data-uri'),
				input = anchor.parents('.dimension').find('input.selected-values'),
				dimensionValues = input.val().split(', '),
				idx;

		idx = dimensionValues.indexOf(uri);
		dimensionValues.splice(idx, 1);
		input.val(dimensionValues.join(', '));
	},
	calculateColumnCount = function() {
		var total = 1,
				dimCount,
				colPlural;

		$('#filter-lists ul').each(function(idx) {
			var ul = $(this);

			if (ul.is(':hidden')) {
				// all values
				dimCount = $('#dimensions .dimension').eq(idx).find('li').size();
			} else  {
				// selected values
				dimCount = ul.find('li:visible').not('.dimension-label').size();
			}
			total = total * dimCount;
		});
		colPlural = (total == 1) ? 'column' : 'columns';
		$('input#submit-fragment').val('Add ' + total + ' ' + colPlural + ' of data');
	}

	$('a.dimension-value').click(function(e) {
		e.preventDefault();
		var filterOption = $(this).parent(),
				filter = $('#filter-' + filterOption.attr('id')),
				filterList = filter.parent();

		filterOption.hide();
		filter.show();
		if (filterList.is(':hidden')) {
			filterList.show();
			filterList.siblings('.all-values').hide();

			if ($('#filters').is(':hidden')) {
				$('#filters').show();
				$('#no-filters').hide();
			}
		}

		addValueWithAnchor($(this));
		calculateColumnCount();
	});

	$('a.remove-dimension-value').click(function(e) {
		e.preventDefault();

		var filter = $(this).parent(),
				filterOption = $('#' + filter.attr('id').replace('filter-', '')),
				filterList = filter.parent(),
				anchor;

		filter.hide();
		filterOption.show();

		if (!filter.siblings().not('.dimension-label').is(':visible')) {
			filterList.hide();
			filterList.siblings('.all-values').show();

			if (!$('#filter-lists .dimension ul').is(':visible')) {
				$('#filters').hide();
				$('#no-filters').show();
			}
		}

		anchor = filterOption.find('a');
		removeValueWithAnchor(anchor);
		calculateColumnCount();
	});

	$('#submit-fragment').click(function() {
		$('.spin').show();
		$('#bf').submit();
	});
	$('#pick-again').click(function() {
		$('.spin').show();
		$('#build-fragment').hide();
	});
